Пусть у вас есть текстовый файл с кодом на питоне.

Напишите функцию inspect_func, которая принимает на себя название файла с кодом на питоне и название выходного файла.

В свою очередь программа должна найти в коде все функции (давайте считать, что все по pep-8, то есть после запятых есть пробелы, перед скобками нет пробела и тд, 
а также нет всяких слэшей, звездочек, типизации…), получить вот такой словарь

{
    'fancy_function': {
        'args': ['first_arg', 'second_arg'],
        'kwargs': {
            'third_arg': 'value3',
            'fourth_arg': 'value4'
            }
    }
}
и записать его в формате JSON в указанный выходной файл.

Если у функции нет позиционных аргументов, то для нее будет 'args': [], аналогично, если нет именованных, то будет 'kwargs': {}.

В примере args – это позиционные аргументы функции, а kwargs – это именованые. Более поняный пример:

def func(a, b, c=1):
    ...
превратится в

{
    "func": {
        "args": ["a", "b"],
        "kwargs": {
            "c": 1
        }
    }
}
Значениями именованных аргументов (кваргов) могут быть только числа и строки из латинских букв/цифр.

Найдите где-нибудь (или напишите сами) код, который содержит минимум 3 различные функции (желательно, чтобы покрывало все возможные случаи с args/kwargs), 
обработайте файл с помощью написанной программы и положите результат в файл output.json.
